# -*- coding: utf-8 -*-
"""Lista4nisston

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WiCZQ9HtP3DHRwfvISUKPgzOVMyVlOkR

Q.1
"""

def ordenar_por_selecao(vetor):
    tamanho = len(vetor)

    for i in range(tamanho):
        indice_minimo = i
        for j in range(i + 1, tamanho):
            if vetor[j] < vetor[indice_minimo]:
                indice_minimo = j
        vetor[i], vetor[indice_minimo] = vetor[indice_minimo], vetor[i]

vetor = [68, 95, 12, 34, 15]
ordenar_por_selecao(vetor)
print("Vetor ordenado:", vetor)

"""Q.2"""

def ordenar_vetor(vetor, crescente=True):

    if crescente:
        return sorted(vetor)
    else:
        return sorted(vetor, reverse=True)

vetor = [64, 25, 12, 22, 11]

vetor_crescente = ordenar_vetor(vetor, crescente=True)
print("Vetor ordenado em ordem crescente:", vetor_crescente)

vetor_decrescente = ordenar_vetor(vetor, crescente=False)
print("Vetor ordenado em ordem decrescente:", vetor_decrescente)

"""Q.3"""

def encontrar_maximo(vetor):
    if not vetor:
        return None

    maximo = vetor[0]

    for elemento in vetor:
        if elemento > maximo:
            maximo = elemento

    return maximo

def encontrar_minimo(vetor):
    if not vetor:
        return None

    minimo = vetor[0]

    for elemento in vetor:
        if elemento < minimo:
            minimo = elemento

    return minimo

vetor = [64, 25, 12, 22, 11]

maximo = encontrar_maximo(vetor)
minimo = encontrar_minimo(vetor)

print("Elemento máximo:", maximo)
print("Elemento mínimo:", minimo)

"""Q.4"""

def segundo_menor(vetor):
    if len(vetor) < 2:
        return "O vetor deve conter pelo menos dois números."

    menor = float('inf')
    segundo_menor = float('inf')

    for numero in vetor:
        if numero < menor:
            segundo_menor = menor
            menor = numero
        elif numero < segundo_menor and numero != menor:
            segundo_menor = numero

    if segundo_menor == float('inf'):
        return "Não há segundo menor número no vetor."
    else:
        return segundo_menor

vetor = [64, 25, 12, 22, 11]

resultado = segundo_menor(vetor)

print("Segundo menor número:", resultado)

"""Q.5"""

def remover_duplicatas(vetor):
    elementos_unicos = set()
    vetor_sem_duplicatas = []
    for elemento in vetor:
        if elemento not in elementos_unicos:
            elementos_unicos.add(elemento)
            vetor_sem_duplicatas.append(elemento)
    return vetor_sem_duplicatas


vetor = [1, 2, 2, 3, 4, 4, 5, 5, 5]

resultado = remover_duplicatas(vetor)

print("Vetor sem duplicatas:", resultado)

"""Q.6"""

def ordenar_decrescente(vetor):
    return sorted(vetor, reverse=True)


def contar_pares_impares(vetor):
    pares = 0
    impares = 0
    for numero in vetor:
        if numero % 2 == 0:
            pares += 1
        else:
            impares += 1
    return pares, impares


vetor = [64, 25, 12, 22, 11]

vetor_ordenado = ordenar_decrescente(vetor)
print("Vetor ordenado em ordem decrescente:", vetor_ordenado)

pares, impares = contar_pares_impares(vetor_ordenado)
print("Número de pares:", pares)
print("Número de ímpares:", impares)

"""Q.7"""

def terceiro_maior(vetor):
    conjunto_sem_duplicatas = set(vetor)
    lista_ordenada = sorted(list(conjunto_sem_duplicatas), reverse=True)
    if len(lista_ordenada) >= 3:
        return lista_ordenada[2]
    else:
        return "Não há terceiro maior número no vetor."


vetor = [64, 25, 12, 22, 11, 25]

resultado = terceiro_maior(vetor)

print("Terceiro maior número:", resultado)

"""Q.8"""

def calcular_mediana(vetor):
    vetor_ordenado = sorted(vetor)
    tamanho = len(vetor_ordenado)
    indice_do_meio = tamanho // 2
    if tamanho % 2 == 1:
        mediana = vetor_ordenado[indice_do_meio]
    else:
        elemento1 = vetor_ordenado[indice_do_meio - 1]
        elemento2 = vetor_ordenado[indice_do_meio]
        mediana = (elemento1 + elemento2) / 2
    return mediana

vetor = [64, 25, 12, 22, 11]

resultado = calcular_mediana(vetor)

print("Mediana:", resultado)