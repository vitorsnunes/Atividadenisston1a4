# -*- coding: utf-8 -*-
"""Lista1nisston.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wv4GOKwHZbCW7Q6xnKGFo9aI4wUero5Y

Questão 1
"""

num1 = float(input("Digite o primeiro número: "))
num2 = float(input("Digite o segundo número: "))
num3 = float(input("Digite o terceiro número: "))

media = (num1 + num2 + num3) / 3

print(f"A média de {num1}, {num2} e {num3} é {media}.")

"""Questão 2"""

num = float(input("Digite um número: "))

if num % 2 == 0:
    print(f"{num} é par.")
else:
    print(f"{num} é ímpar.")

"""Questão 3"""

num = float(input("Digite um número: "))

contador = 0

while contador <= num:
    print(contador)
    contador +=1

"""Questão 4"""

numeros = [3, 66, 987, 12, 1, 45, 332, 70]

print(f"O menor número da lista é {min(numeros)}, o maior é {max(numeros)}.")

"""Q.5"""

numeros = [3, 66, 987, 12, 1, 45, 332, 70]
numeros_pares = []

for i in numeros:
    if i % 2 == 0:
        numeros_pares.append(i)

media_pares = sum(numeros_pares) / len(numeros_pares)

print(media_pares)

"""Q.6"""

num = int(input("Digite um número inteiro positivo: "))

contador = 1
resultado = 1

while contador < num:
    resultado *= contador
    contador += 1

print(f"O fatorial de {num} é {resultado}")

"""Q.7"""

num = int(input("Digite um número: "))

lista_fib = [0, 1]

while lista_fib[-1] + lista_fib[-2] <= num:
    proximo_fib = lista_fib[-1] + lista_fib[-2]
    lista_fib.append(proximo_fib)

for i in lista_fib:
    print(i)

"""Q.8"""

num = int(input("Digite um número: "))

if num == 1:
    print(f"{num} não é primo.")
elif num > 1:
    for i in range(2, int(num/2)+1):
        if (num % i) == 0:
            print(f"{num} não é primo.")
            break
    else:
        print(f"{num} é primo.")
else:
    print(f"{num} não é primo.")

"""Q.9"""

nomes = ["amélia", "joão", "barnabé", "amaro", "paulo", "marcos", "nelson", "antônio", "amanda", "ricardo", "ulisses", "abel"]
nomes_com_a = []

for i in nomes:
    if i[0] == "a":
        nomes_com_a.append(i)

print(nomes_com_a)

"""Q.10"""

import random

opcoes = ["pedra", "papel", "tesoura"]

while True:

    while True:
        tentativa = input("\nEscolha pedra, papel ou tesoura: ").lower()
        if tentativa not in opcoes:
            print("\033[0;31mInválido!\033[0;0m")
            continue
        else:
            break

    escolha_computador = random.choice(opcoes)

    print(f"O computador escolheu \033[0;33m{escolha_computador}\033[0;0m!")

    if tentativa == escolha_computador:
        print("\033[0;34mEmpate!\033[0;0m\n")
    elif tentativa == opcoes[0] and escolha_computador == opcoes[1]:
        print("Papel derrota pedra! \033[0;31mVitória do computador!\033[0;0m\n")
    elif tentativa == opcoes[0] and escolha_computador == opcoes[2]:
        print("Pedra derrota tesoura! \033[0;32mVocê venceu!\033[0;0m\n")
    elif tentativa == opcoes[1] and escolha_computador == opcoes[2]:
        print("Tesoura derrota papel! \033[0;31mVitória do computador!\033[0;0m\n")
    elif tentativa == opcoes[1] and escolha_computador == opcoes[0]:
        print("Papel derrota pedra! \033[0;32mVocê venceu!\033[0;0m\n")
    elif tentativa == opcoes[2] and escolha_computador == opcoes[0]:
        print("Pedra derrota tesoura! \033[0;31mVitória do computador!\033[0;0m\n")
    elif tentativa == opcoes[2] and escolha_computador == opcoes[1]:
        print("Tesoura derrota papel! \033[0;32mVocê venceu!\033[0;0m\n")

    jogar_novamente = input("Deseja jogar novamente? [\033[0;32mS\033[0;0m/\033[0;31mN\033[0;0m]: ").lower()

    while jogar_novamente not in "sn":
        print("\033[0;31mInválido!\033[0;0m Escolha S (Sim) ou N (Não)!\n")
        jogar_novamente = input("Deseja jogar novamente? [\033[0;32mS\033[0;0m/\033[0;31mN\033[0;0m]: ").lower()

    if jogar_novamente == "s":
        continue
    elif jogar_novamente == "n":
        break

print("\n\033[0;31mGame over!\033[0;0m Obrigado por jogar!")